name: Update Gist Data

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch: # Manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Update Spotify Data
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
        run: |
          # Get Spotify access token
          TOKEN_RESPONSE=$(curl -s -X POST https://accounts.spotify.com/api/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -u "${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}" \
            -d "grant_type=refresh_token&refresh_token=${SPOTIFY_REFRESH_TOKEN}")

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')

          if [ "$ACCESS_TOKEN" != "null" ] && [ -n "$ACCESS_TOKEN" ]; then
            # Get recently played track
            SPOTIFY_DATA=$(curl -s -H "Authorization: Bearer ${ACCESS_TOKEN}" \
              "https://api.spotify.com/v1/me/player/recently-played?limit=1")
            
            TRACK_URL=$(echo $SPOTIFY_DATA | jq -r '.items[0].track.external_urls.spotify // empty')
            TRACK_NAME=$(echo $SPOTIFY_DATA | jq -r '.items[0].track.name // empty')
            ARTISTS=$(echo $SPOTIFY_DATA | jq -r '[.items[0].track.artists[].name] | join(", ") // empty')

            if [ -n "$TRACK_NAME" ] && [ -n "$ARTISTS" ] && [ -n "$TRACK_URL" ]; then
              TITLE="${ARTISTS} — ${TRACK_NAME}"
            else
              TRACK_URL=""
              TITLE=""
            fi

            # Create JSON (use nulls when empty)
            SPOTIFY_JSON=$(jq -n \
              --arg url "$TRACK_URL" \
              --arg title "$TITLE" \
              '{
                url: (if $url == "" then null else $url end),
                title: (if $title == "" then null else $title end)
              }')
            
            echo "Spotify data: $SPOTIFY_JSON"
            
            # Update Gist file
            curl -X PATCH \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/gists/${GIST_ID}" \
              -d "{\"files\":{\"spotify.json\":{\"content\":$(echo $SPOTIFY_JSON | jq -R .)}}}"
          else
            echo "Failed to get Spotify access token"
          fi

      - name: Update Wakatime Data
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
        run: |
          # Calculate date range (last 7 days)
          END_DATE=$(date -u +%Y-%m-%d)
          START_DATE=$(date -u -d '6 days ago' +%Y-%m-%d 2>/dev/null || date -u -v-6d +%Y-%m-%d)

          # Get Wakatime data
          AUTH_HEADER=$(echo -n "${WAKATIME_API_KEY}:" | base64)
          WAKATIME_DATA=$(curl -s -H "Authorization: Basic ${AUTH_HEADER}" \
            "https://wakatime.com/api/v1/users/current/summaries?start=${START_DATE}&end=${END_DATE}")

          TOTAL_SECONDS=$(echo $WAKATIME_DATA | jq -r '.cumulative_total.seconds // 0')
          TOTAL_TEXT=$(echo $WAKATIME_DATA | jq -r '.cumulative_total.text // "0 mins"')

          # Create JSON
          WAKATIME_JSON=$(jq -n \
            --arg totalText "$TOTAL_TEXT" \
            --argjson totalSeconds "$TOTAL_SECONDS" \
            --arg start "$START_DATE" \
            --arg end "$END_DATE" \
            '{
              totalText: $totalText,
              totalSeconds: $totalSeconds,
              topLanguages: [],
              range: {
                start: $start,
                end: $end,
                days: 7
              }
            }')

          echo "Wakatime data: $WAKATIME_JSON"

          # Update Gist file
          curl -X PATCH \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "{\"files\":{\"wakatime.json\":{\"content\":$(echo $WAKATIME_JSON | jq -R .)}}}"

      - name: Update Location Data
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          LOCATION_CITY: ${{ secrets.LOCATION_CITY }}
          LOCATION_COUNTRY: ${{ secrets.LOCATION_COUNTRY }}
        run: |
          # Create location JSON (you can customize this or fetch from an API)
          LOCATION_JSON=$(jq -n \
            --arg city "${LOCATION_CITY:-Пхукет}" \
            --arg country "${LOCATION_COUNTRY:-Таиланд}" \
            '{city: $city, country: $country}')

          echo "Location data: $LOCATION_JSON"

          # Update Gist file
          curl -X PATCH \
            -H "Authorization: token ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/gists/${GIST_ID}" \
            -d "{\"files\":{\"location.json\":{\"content\":$(echo $LOCATION_JSON | jq -R .)}}}"
