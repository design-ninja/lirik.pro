---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import FormattedDate from '../../components/Blog/FormattedDate.astro';
import PostPreview from '../../components/Blog/PostPreview.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';

export async function getStaticPaths() {
  const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
  const postCount = posts.length;
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null
    }
  }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo } = post.data;
const { Content } = await post.render();
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article">
  <article class="article">
    <header>
      <h1>{title}</h1>
      <div>
        <FormattedDate date={publishDate} />
        {
          updatedDate && (
            <>
              {' '}
              <span>
                (Обновлено: <FormattedDate date={updatedDate} />)
              </span>
            </>
          )
        }
      </div>
    </header>
    <div>
      <Content />
    </div>
    <div>
      {
        tags.length > 0 && (
          <div>
            {tags.map((tag) => (
              <a href={`/tags/${slugify(tag)}`}>#{tag}</a>
            ))}
          </div>
        )
      }
    </div>
    {
      (prevPost || nextPost) && (
        <div>
          <h3>Еще в Блоге</h3>
          {nextPost && <PostPreview post={nextPost} headingLevel="h3" />}
          {prevPost && <PostPreview post={prevPost} headingLevel="h3" />}
        </div>
      )
    }
  </article>
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
    copyUrlButton?.addEventListener('click', async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute('data-url') || '';
      let label = button.innerText;

      await navigator.clipboard.writeText(url);

      button.innerText = 'Copied';

      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }
  });
</script>

<style lang="scss">
  .article {
    display: grid;
    gap: var(--space-64);
    margin: 0 auto;
    max-width: 900px;

    &__nav {
      display: flex;
      gap: var(--space-24);
      justify-content: space-between;
      align-items: start;
      text-decoration: none;
      padding-top: var(--space-24);
      border-top: 1px solid var(--color-border-primary);

      &Item {
        display: inline-grid;
        gap: var(--space-24);

        &:last-child {
          text-align: right;
        }
      }
    }
  }

  :global(.article img) {
    border-radius: var(--radius-m);
    display: block;
  }
</style>
