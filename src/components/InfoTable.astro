---
import { getCollection } from 'astro:content';
import { type Locale } from '../utils/i18n';

type Props = {
  locale: Locale;
};

const { locale } = Astro.props as Props;
const [infoTableData] = await getCollection('components', (entry) => entry.data.id === 'info-table' && entry.data.locale === locale);
const infoTableTexts = infoTableData?.data.texts || {};
---

<div class="InfoTable" id="info-table" data-loading="true">
  <div class="InfoTable__Row">
    <span class="InfoTable__RowLabel">{infoTableTexts.location_label}</span> <a class="InfoTable__RowValue" href='#' target='_blank' rel='noopener' id='location'>-</a>
  </div>
  <div class="InfoTable__Row">
    <span class="InfoTable__RowLabel">{infoTableTexts.spotify_label}</span> <a class="InfoTable__RowValue" href='#' target='_blank' rel='noopener' id='spotify'>-</a>
  </div>
  <div class="InfoTable__Row">
    <span class="InfoTable__RowLabel">{infoTableTexts.wakatime_label}</span> <a class="InfoTable__RowValue" href='#' target='_blank' rel='noopener' id='wakatime'>-</a>
  </div>
  <div class="InfoTable__Row">
    <span class="InfoTable__RowLabel">{infoTableTexts.book_label}</span> <a class="InfoTable__RowValue" href='https://www.amazon.com/Creative-Act-Way-Being/dp/0593652886' target='_blank' rel='noopener' id='book'>{infoTableTexts.book_value}</a>
  </div>
  <div class="InfoTable__Row">
    <span class="InfoTable__RowLabel">{infoTableTexts.learn_label}</span> <span class="InfoTable__RowValue"><a href='https://www.youtube.com/@letslearnthai' target='_blank' rel='noopener' id='learn'>{infoTableTexts.learn_value}</a></span>
  </div>
</div>

<style lang='scss'>
  .InfoTable {
    display: flex;
    flex-direction: column;
    gap: var(--space-8);
    border-radius: var(--radius-m);
    border: var(--size-1) solid var(--color-border-primary);
    padding: var(--space-20);

    &__Row {
      display: flex;
      flex-direction: column;
      gap: var(--space-2);
      font-family: monospace;
      font-size: var(--font-size-14);
      border-bottom: var(--size-1) solid var(--color-border-primary);
      padding-bottom: var(--space-8);

      &:last-child {
        border-bottom: none;
        padding-bottom: 0;
      }

      &Label {
        color: var(--color-text-secondary);
      }

      &Value {
        width: fit-content;
        min-height: var(--size-24);
        display: inline-flex;
        align-items: center;
        position: relative;
        overflow: hidden;
      }
    }
  }

</style>

<script>
  const INFO_TABLE_ROOT_ID = 'info-table';

  type InfoCache = {
    location?: { text: string; href: string };
    spotify?: { title: string; url: string };
    wakatime?: { text: string; href: string };
  };

  const globalScope = window as unknown as {
    __infoTableCache?: InfoCache;
    __infoTableInitPromise?: Promise<void>;
  };

  function getRoot() {
    return document.getElementById(INFO_TABLE_ROOT_ID);
  }

  function setLoadingState(isLoading: boolean) {
    const root = getRoot();
    if (!root) return;
    root.dataset.loading = isLoading ? 'true' : 'false';
  }

  function setAnchor(id: string, text: string, href?: string) {
    const el = document.getElementById(id) as HTMLAnchorElement | null;
    if (!el) return;
    el.textContent = text || '-';
    el.href = href || '#';
  }

  function applyFromCache() {
    const cache = globalScope.__infoTableCache;
    if (!cache) return;
    if (cache.location) setAnchor('location', cache.location.text, cache.location.href);
    if (cache.spotify) setAnchor('spotify', cache.spotify.title, cache.spotify.url);
    if (cache.wakatime) setAnchor('wakatime', cache.wakatime.text, cache.wakatime.href);
    const hasData = Boolean(
      (cache.location && cache.location.text && cache.location.text !== '-') ||
      (cache.spotify && cache.spotify.title && cache.spotify.title !== '-') ||
      (cache.wakatime && cache.wakatime.text && cache.wakatime.text !== '-')
    );
    if (hasData) {
      setLoadingState(false);
    }
  }

  function updateCache(partial: Partial<InfoCache>) {
    globalScope.__infoTableCache = { ...(globalScope.__infoTableCache || {}), ...partial } as InfoCache;
  }

  async function fetchLocation() {
    const RAW_URL = import.meta.env.PUBLIC_LOCATION_JSON_URL;
    if (!RAW_URL) {
      updateCache({ location: { text: '-', href: '#' } });
      setAnchor('location', '-');
      return;
    }
    try {
      const url = RAW_URL + (RAW_URL.includes('?') ? '&' : '?') + 't=' + Date.now();
      const res = await fetch(url, { cache: 'no-store' });
      if (!res.ok) throw new Error('bad status');
      const data = await res.json();
      const value = [data.city, data.country].filter(Boolean).join(', ');
      const text = value || '-';
      const href = value ? `https://www.google.com/maps/place/${encodeURIComponent(value)}` : '#';
      updateCache({ location: { text, href } });
      setAnchor('location', text, href);
    } catch {
      updateCache({ location: { text: '-', href: '#' } });
      setAnchor('location', '-');
    }
  }

  async function fetchSpotify() {
    const SPOTIFY_URL = import.meta.env.PUBLIC_SPOTIFY_JSON_URL;
    if (!SPOTIFY_URL) {
      updateCache({ spotify: { title: '-', url: '#' } });
      setAnchor('spotify', '-');
      return;
    }
    try {
      const url = SPOTIFY_URL + (SPOTIFY_URL.includes('?') ? '&' : '?') + 't=' + Date.now();
      const res = await fetch(url, { cache: 'no-store' });
      if (!res.ok) throw new Error('bad status');
      const data = await res.json();
      if (data?.url && data?.title) {
        updateCache({ spotify: { title: data.title, url: data.url } });
        setAnchor('spotify', data.title, data.url);
      } else {
        updateCache({ spotify: { title: '-', url: '#' } });
        setAnchor('spotify', '-');
      }
    } catch {
      updateCache({ spotify: { title: '-', url: '#' } });
      setAnchor('spotify', '-');
    }
  }

  async function fetchWakatime() {
    const WAKATIME_URL = import.meta.env.PUBLIC_WAKATIME_JSON_URL;
    if (!WAKATIME_URL) {
      updateCache({ wakatime: { text: '-', href: '#' } });
      setAnchor('wakatime', '-');
      return;
    }
    try {
      const url = WAKATIME_URL + (WAKATIME_URL.includes('?') ? '&' : '?') + 't=' + Date.now();
      const res = await fetch(url, { cache: 'no-store' });
      if (!res.ok) throw new Error('bad status');
      const data = await res.json();
      if (data?.totalText) {
        const text = `${data.totalText} / 7 days`;
        const href = 'https://wakatime.com/@lirik';
        updateCache({ wakatime: { text, href } });
        setAnchor('wakatime', text, href);
      } else {
        updateCache({ wakatime: { text: '-', href: '#' } });
        setAnchor('wakatime', '-');
      }
    } catch {
      updateCache({ wakatime: { text: '-', href: '#' } });
      setAnchor('wakatime', '-');
    }
  }

  async function initOnce() {
    if (!globalScope.__infoTableInitPromise) {
      globalScope.__infoTableInitPromise = (async () => {
        try {
          await Promise.all([fetchLocation(), fetchSpotify(), fetchWakatime()]);
        } finally {
          setLoadingState(false);
        }
      })();
    }
    await globalScope.__infoTableInitPromise;
  }

  function initInfoTable() {
    applyFromCache();
    void initOnce().then(applyFromCache);
  }

  function scheduleInfoTableInit() {
    applyFromCache();
    const run = () => initInfoTable();
    if ('requestIdleCallback' in window) {
      requestIdleCallback(run, { timeout: 5000 });
    } else {
      setTimeout(run, 2000);
    }
  }

  if (document.readyState === 'complete') {
    scheduleInfoTableInit();
  } else {
    window.addEventListener('load', () => {
      setTimeout(scheduleInfoTableInit, 1000);
    });
  }

  document.addEventListener('astro:page-load', () => {
    if (document.readyState === 'complete') {
      setTimeout(scheduleInfoTableInit, 1000);
    } else {
      window.addEventListener('load', () => {
        setTimeout(scheduleInfoTableInit, 1000);
      }, { once: true });
    }
  });
</script>


