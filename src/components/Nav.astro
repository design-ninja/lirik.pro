---
import { Icon } from 'astro-icon/components';
import NavLink from './NavLink.astro';
import ThemeToggle from './ThemeToggle.astro';
import siteConfig from '../data/site-config';

const navLinks = siteConfig.headerNavLinks || [];
---

<nav class="nav">
  {
    navLinks.length > 0 && (
      <div class="wrap">
        <button class="menu__toggle" aria-label="Open Menu" aria-expanded="false" aria-controls="menu-items">
          <Icon id="menuIcon" name="menu" class="menu__icon menu__icon--menu" width={32} height={32} />
          <Icon id="closeIcon" name="close" class="menu__icon menu__icon--close" width={32} height={32} style="display: none;" />
        </button>
        <ul id="menu-items" class="menu">
          {navLinks.map((link) => (
            <li class="navitem">
              <NavLink class="navlink" href={link.href}>
                {link.text}
              </NavLink>
            </li>
          ))}
          <li>
            <div class="theme-toggle-wrapper">
              <ThemeToggle />
            </div>
          </li>
        </ul>
      </div>
    )
  }
</nav>

<style lang="scss">
  nav {
    .wrap {
      .menu {
        display: flex;
        gap: var(--space-40);
        list-style: none;

        @media (max-width: 1000px) {
          flex-direction: column;
          gap: var(--space-32);
          position: absolute;
          top: 7rem;
          left: 0;
          right: 0;
          z-index: 2;
          background-color: var(--color-bg-base);
          visibility: hidden;
          opacity: 0;
          padding-bottom: var(--space-24);
          padding-left: var(--space-24);
          border-bottom: var(--size-1) solid var(--color-border-primary);
          transition:
            opacity 0.25s ease-in-out,
            visibility 0.25s ease-in-out;

          &.is-visible {
            visibility: visible;
            opacity: 1;
          }
        }

        &__toggle {
          width: var(--size-40);
          height: var(--size-40);
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
          cursor: pointer;
          background-color: transparent;
          border: none;
          outline: none;
          padding: 0;

          @media (min-width: 1000px) {
            display: none;
          }
        }

        .navitem {
          padding: 0.25rem 0;

          .navlink {
            font-size: var(--font-size-18);
            color: var(--color-main);
          }
        }
      }
    }
  }

  .menu__icon--menu {
    display: block;
  }

  .menu__icon--close {
    display: none;
  }

  .is-active .menu__icon--menu {
    display: none;
  }

  .is-active .menu__icon--close {
    display: block;
  }

  [data-icon] {
    color: var(--color-icon-primary);
  }
</style>

<script is:inline>
  function menuToggle() {
    const menu = document.querySelector('.menu');
    const menuToggleBtn = document.querySelector('.menu__toggle');
    const menuIcon = document.getElementById('menuIcon');
    const closeIcon = document.getElementById('closeIcon');

    function closeMenu() {
      menuToggleBtn.classList.remove('is-active');
      menuToggleBtn.setAttribute('aria-expanded', 'false');
      menuToggleBtn.setAttribute('aria-label', 'Open Menu');
      menu.classList.remove('is-visible');
    }

    menuToggleBtn?.addEventListener('click', (event) => {
      const isMenuExpanded = menuToggleBtn.getAttribute('aria-expanded') === 'true';
      menuToggleBtn.classList.toggle('is-active');
      menuToggleBtn.setAttribute('aria-expanded', isMenuExpanded ? 'false' : 'true');
      menuToggleBtn.setAttribute('aria-label', isMenuExpanded ? 'Open Menu' : 'Close Menu');
      menu?.classList.toggle('is-visible');
      menuIcon.style.display = isMenuExpanded ? 'block' : 'none';
      closeIcon.style.display = isMenuExpanded ? 'none' : 'block';
    });

    document.addEventListener('click', (event) => {
      if (!menu.contains(event.target) && !menuToggleBtn.contains(event.target)) {
        closeMenu();
        menuIcon.style.display = 'block';
        closeIcon.style.display = 'none';
      }
    });

    const navLinks = menu.querySelectorAll('.navlink');
    navLinks.forEach((link) => {
      link.addEventListener('click', () => {
        closeMenu();
        menuIcon.style.display = 'block';
        closeIcon.style.display = 'none';
      });
    });
  }

  menuToggle();
  document.addEventListener('astro:after-swap', menuToggle);
</script>
