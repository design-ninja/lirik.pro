---
import { Icon } from "astro-icon/components";

export interface Props {
  label?: string;
}

const { label = "Показать меню" } = Astro.props;
---

<button
  type="button"
  class="menu__toggle"
  aria-label={label}
  data-aw-toggle-menu
>
  <Icon id="menuIcon" name="menu" class="menu__icon" width={32} height={32} />
  <Icon
    id="closeIcon"
    name="close"
    class="menu__icon"
    width={32}
    height={32}
    style="display: none;"
  />
</button>

<style is:global lang="scss">
  .menu__toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;

    svg {
      pointer-events: none;
    }
  }

  @media (max-width: 992px) {
    .menu__toggle {
      display: block;
    }
  }

  @media (min-width: 992px) {
    .menu__toggle {
      display: none;
    }
  }
</style>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const initMenuToggle = () => {
      const menu = document.querySelector(".menu");
      const menuToggle = document.querySelector("[data-aw-toggle-menu]");
      const menuIcon = document.getElementById("menuIcon");
      const closeIcon = document.getElementById("closeIcon");
      const navLinks = document.querySelectorAll("[data-navLink]");
      const themeToggle = document.getElementById("themeToggle");

      if (!menu || !menuToggle || !menuIcon || !closeIcon) {
        console.error("Menu elements are not found.");
        return;
      }

      const toggleMenu = () => {
        const isMenuOpen = menu.classList.toggle("expanded");
        menuToggle.classList.toggle("expanded", isMenuOpen);
        if (isMenuOpen) {
          menuIcon.style.display = "none";
          closeIcon.style.display = "block";
        } else {
          menuIcon.style.display = "block";
          closeIcon.style.display = "none";
        }
      };

      menuToggle.addEventListener("click", toggleMenu);

      document.addEventListener("click", (event) => {
        if (
          !menu.contains(event.target) &&
          event.target !== menuToggle &&
          menu.classList.contains("expanded")
        ) {
          toggleMenu();
        }
      });

      window.addEventListener("resize", () => {
        if (window.innerWidth >= 992 && menu.classList.contains("expanded")) {
          toggleMenu();
        }
      });

      navLinks.forEach((link) => {
        link.addEventListener("click", () => {
          if (menu.classList.contains("expanded")) {
            toggleMenu();
          }
        });
      });

      if (themeToggle) {
        themeToggle.addEventListener("click", () => {
          if (menu.classList.contains("expanded")) {
            toggleMenu();
          }
        });
      } else {
        console.error("Theme toggle element not found.");
      }
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initMenuToggle);
    } else {
      initMenuToggle();
    }
  });
</script>
